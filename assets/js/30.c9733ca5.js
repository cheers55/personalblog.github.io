(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{352:function(s,t,n){"use strict";n.r(t);var a=n(33),e=Object(a.a)({},(function(){var s=this,t=s.$createElement,n=s._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h1",{attrs:{id:"🌈-js-基础面试题总结"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#🌈-js-基础面试题总结"}},[s._v("#")]),s._v(" 🌈 JS 基础面试题总结")]),s._v(" "),n("h2",{attrs:{id:"_1-javascript-的数据类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-javascript-的数据类型"}},[s._v("#")]),s._v(" 1. JavaScript 的数据类型")]),s._v(" "),n("h3",{attrs:{id:"基本数据类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#基本数据类型"}},[s._v("#")]),s._v(" 基本数据类型")]),s._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[s._v("String、Number（浮点类型，基于IEEE 754）、Boolean、null、undefined、Symbol（独一无二）、BigInt（比Number范围更大的整数值）\n")])])]),n("h3",{attrs:{id:"引用数据类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#引用数据类型"}},[s._v("#")]),s._v(" 引用数据类型")]),s._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[s._v("Object（Object、Function、Array）\n")])])]),n("h2",{attrs:{id:"_2-null-和-undefined-的区别"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-null-和-undefined-的区别"}},[s._v("#")]),s._v(" 2. null 和 undefined 的区别")]),s._v(" "),n("h3",{attrs:{id:"null"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#null"}},[s._v("#")]),s._v(" null")]),s._v(" "),n("p",[n("code",[s._v("null")]),s._v('表示"没有对象"，即该处不应该有值。典型用法是：')]),s._v(" "),n("ol",[n("li",[s._v("作为函数的参数，表示该函数的参数不是对象；")]),s._v(" "),n("li",[s._v("作为对象原型链的终点；")])]),s._v(" "),n("h3",{attrs:{id:"undefined"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#undefined"}},[s._v("#")]),s._v(" undefined")]),s._v(" "),n("p",[n("code",[s._v("undefined")]),s._v('表示"缺少值"，就是此处应该有一个值，但是还没有定义。典型用法是：')]),s._v(" "),n("ol",[n("li",[s._v("变量被声明了，但没有赋值（"),n("code",[s._v("var i;")]),s._v("）；")]),s._v(" "),n("li",[s._v("对象没有赋值的属性（"),n("code",[s._v("var obj = {}; console.log(obj.name);")]),s._v("）；")]),s._v(" "),n("li",[s._v("调用函数时，应该提供的参数没有提供（"),n("code",[s._v("function fun(obj){ console.log(obj); }; fun();")]),s._v("）；")]),s._v(" "),n("li",[s._v("函数没有返回值时（"),n("code",[s._v("var x = fun(); x;")]),s._v("）；")])]),s._v(" "),n("h2",{attrs:{id:"_3-typeof-和-instanceof-的区别"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-typeof-和-instanceof-的区别"}},[s._v("#")]),s._v(" 3. typeof 和 instanceof 的区别")]),s._v(" "),n("table",[n("thead",[n("tr",[n("th",{staticStyle:{"text-align":"left"}},[n("strong",[s._v("typeof")])]),s._v(" "),n("th",{staticStyle:{"text-align":"left"}},[n("strong",[s._v("instanceof")])]),s._v(" "),n("th",{staticStyle:{"text-align":"left"}},[n("strong",[s._v("Object.prototype.toString().call()")])])])]),s._v(" "),n("tbody",[n("tr",[n("td",{staticStyle:{"text-align":"left"}},[s._v("用来判断基本数据类型")]),s._v(" "),n("td",{staticStyle:{"text-align":"left"}},[s._v("用来判断左边构造函数的 prototype 属性是否存在右边对象的原型链上")]),s._v(" "),n("td",{staticStyle:{"text-align":"left"}},[s._v("是对象的一个原生原型拓展函数，用来精确的区分数据类型")])])])]),s._v(" "),n("h2",{attrs:{id:"instanceof-的实现"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#instanceof-的实现"}},[s._v("#")]),s._v(" instanceof 的实现")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("function _instanceof(left, right){\n    const newLeft = left.__proto__;\n    while(newLeft){\n        if(newLeft === right.prototype) return true;\n    }\n    return false;\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("h2",{attrs:{id:"_4-为什么是-true？"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-为什么是-true？"}},[s._v("#")]),s._v(" 4. [] !== [] 为什么是 true？")]),s._v(" "),n("ul",[n("li",[s._v("下边是这个表达式为何为"),n("code",[s._v("true")]),s._v("的步骤：")])]),s._v(" "),n("ol",[n("li",[s._v("[] == ![];")]),s._v(" "),n("li",[s._v("[] == false;")]),s._v(" "),n("li",[s._v("[] == Number(false);")]),s._v(" "),n("li",[s._v("[] == 0;")]),s._v(" "),n("li",[s._v("[].toString() == 0;")]),s._v(" "),n("li",[s._v("0 == 0;")])]),s._v(" "),n("h2",{attrs:{id:"_5-原型链"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-原型链"}},[s._v("#")]),s._v(" 5. 原型链")]),s._v(" "),n("ul",[n("li",[s._v("每个函数都有 "),n("code",[s._v("prototype")]),s._v(" 属性，该属性指向原型。每个对象都有 "),n("code",[s._v("__proto__")]),s._v(" 属性，指向了创建该对象的构造函数的原型，"),n("strong",[n("em",[s._v("其实这个属性指向了 [[prototype]] ，但是 [[prototype]] 是内部引擎属性，我们并不能访问到")])]),s._v("。所以用"),n("code",[s._v("__proto__")]),s._v("来访问。对象可以通过 "),n("code",[s._v("__proto__")]),s._v(" 来寻找不属于该对象的属性，"),n("code",[s._v("__proto__")]),s._v(" 将对象连接起来组成了原型链。")])]),s._v(" "),n("p",[n("img",{attrs:{src:"/prototype.jpg",alt:"原型链"}})]),s._v(" "),n("h2",{attrs:{id:"_6-new"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-new"}},[s._v("#")]),s._v(" 6. new")]),s._v(" "),n("ul",[n("li",[s._v("总体思路如下：")])]),s._v(" "),n("ol",[n("li",[s._v("新生成了一个对象；")]),s._v(" "),n("li",[s._v("链接到原型；")]),s._v(" "),n("li",[s._v("绑定 this；")]),s._v(" "),n("li",[s._v("返回新对象；")])]),s._v(" "),n("h3",{attrs:{id:"new-的实现"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#new-的实现"}},[s._v("#")]),s._v(" new 的实现")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("function _new(){\n    const newObj = {};\n    // 获取当前的构造函数\n    const Contructor = Array.prototype.shift.call(arguments);\n    newObj.__proto__ == Contructor.prototype;\n    Contructor.apply(newObj, arguments);\n    return newObj;\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br")])]),n("ul",[n("li",[s._v("对于创建一个对象来说，更推荐使用字面量的方式创建对象。因为你使用 "),n("code",[s._v("new Object()")]),s._v(" 的方式创建对象需要通过作用域链一层层找到 "),n("code",[s._v("Object")]),s._v("，但是你使用字面量的方式就没这个问题。")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// 这个字面量内部也是使用了 new Object()\nconst person = { name: cxh };\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("ul",[n("li",[s._v("对于"),n("code",[s._v("new")]),s._v("来说，还需要注意下运算符优先级。")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("function Foo() {\n return this;\n};\n\nFoo.getName = function () {\n console.log('1');\n};\n\nFoo.prototype.getName = function () {\n console.log('2');\n};\n\nnew Foo.getName(); // -> 1\nnew Foo().getName(); // -> 2\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br")])]),n("ul",[n("li",[s._v("可以看出"),n("code",[s._v("new Foo()")]),s._v(" 的优先级大于 "),n("code",[s._v("new Foo")]),s._v(" ，所以对于上述代码来说可以这样划分执行顺序:")])]),s._v(" "),n("ol",[n("li",[s._v("new (Foo.getName());")]),s._v(" "),n("li",[s._v("(new Foo()).getName();")])]),s._v(" "),n("blockquote",[n("p",[s._v("对于第一个函数来说，先执行了 Foo.getName() ，所以结果为 1；对于后者来说，先执行 new Foo() 产生了一个实例，然后通过原型链找到了 Foo 上的 getName 函数，所以结果为 2。")])]),s._v(" "),n("h2",{attrs:{id:"_7-this"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_7-this"}},[s._v("#")]),s._v(" 7. this")]),s._v(" "),n("ul",[n("li",[s._v("一句话概括"),n("code",[s._v("this")]),s._v("，谁调用它它就指向谁。为了更好的理解"),n("code",[s._v("this")]),s._v("，做了一个小小的总结：")])]),s._v(" "),n("ol",[n("li",[s._v("在全局作用域内，this 指向 window；")]),s._v(" "),n("li",[s._v("在 class 中，this 指向新创建的类实例；")]),s._v(" "),n("li",[s._v("在函数中，分为两种函数。箭头函数，this 指向包裹箭头函数的第一个普通函数。普通函数中又分为两种。new 的方式，this 指向 new 出来的实例。直接调用，this 指向 window。间接调用，this 指向调用它的对象。")])]),s._v(" "),n("h2",{attrs:{id:"_8-apply、call、bind"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_8-apply、call、bind"}},[s._v("#")]),s._v(" 8. apply、call、bind")]),s._v(" "),n("ul",[n("li",[s._v("都是为了解决改变"),n("code",[s._v("this")]),s._v("的指向。这三个函数的第一个参数都是"),n("code",[s._v("this")]),s._v("的指向对象，第二个参数差别就来了：")])]),s._v(" "),n("table",[n("thead",[n("tr",[n("th",{staticStyle:{"text-align":"left"}},[n("strong",[s._v("call")])]),s._v(" "),n("th",{staticStyle:{"text-align":"left"}},[n("strong",[s._v("apply")])]),s._v(" "),n("th",{staticStyle:{"text-align":"left"}},[n("strong",[s._v("bind")])])])]),s._v(" "),n("tbody",[n("tr",[n("td",{staticStyle:{"text-align":"left"}},[s._v("后续参数用"),n("code",[s._v(",")]),s._v("号分隔，可传多个参数")]),s._v(" "),n("td",{staticStyle:{"text-align":"left"}},[s._v("后续参数用数组进行传参")]),s._v(" "),n("td",{staticStyle:{"text-align":"left"}},[s._v("和"),n("code",[s._v("call")]),s._v("的传参方式一致，但是会返回新的绑定函数，必须调用才会被执行")])])])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("const person = {\n value: 1\n};\nfunction getValue(name, age) {\n    console.log(name);\n    console.log(age);\n    console.log(this.value);\n};\ngetValue.call(person, 'cxh', '18');\ngetValue.apply(person, ['cxh', '18']);\ngetValue.bind(person, 'cxh', '18')();\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br")])]),n("h3",{attrs:{id:"call-的实现"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#call-的实现"}},[s._v("#")]),s._v(" call 的实现")]),s._v(" "),n("ul",[n("li",[s._v("可以从以下几点来考虑如何实现：")])]),s._v(" "),n("ol",[n("li",[s._v("不传入第一个参数，那么默认为"),n("code",[s._v("window")]),s._v("；")]),s._v(" "),n("li",[s._v("改变了"),n("code",[s._v("this")]),s._v("指向，让新的对象可以执行该函数;")])]),s._v(" "),n("p",[n("strong",[s._v("那么思路是否可以变成给新的对象添加一个函数，执行完以后删除。")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// call\nFunction.prototype._bind = function(context){\n    // 不传入第一个参数，那么默认为window\n    const context = context || window;\n    // 给新的对象添加一个函数，改变this指向\n    context.fn = this;\n    // 将context后面的参数取出来\n    let args = [...arguments].slice(1);\n    // 让新的对象可以执行该函数\n    const result = context.fn(...args);\n    // 执行完以后删除\n    delete context.fn;\n    return result;\n};\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br")])]),n("h3",{attrs:{id:"apply-的实现"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#apply-的实现"}},[s._v("#")]),s._v(" apply 的实现")]),s._v(" "),n("ul",[n("li",[s._v("唯一和"),n("code",[s._v("call")]),s._v("不同的地方是参数不同。")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// apply\nFunction.prototype._apply = function(context){\n    const context = context || window;\n    context.fn = this;\n    let result;\n    // 需要判断是否存储第二个参数\n    // 如果存在，就将第二个参数展开\n    if(arguments[1]){\n        result = context.fn(...arguments[1]);\n    } else {\n        result = context.fn();\n    }\n    delete context.fn;\n    return result;\n};\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br")])]),n("h3",{attrs:{id:"bind-的实现"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#bind-的实现"}},[s._v("#")]),s._v(" bind 的实现")]),s._v(" "),n("ul",[n("li",[s._v("bind 实现的思路大致如下：")])]),s._v(" "),n("ol",[n("li",[s._v("会返回一个新的函数；")]),s._v(" "),n("li",[s._v("在 bind() 被调用时，这个新函数的 this 被指定为 bind() 的第一个参数，而其余参数将作为新函数的参数，供调用时使用；")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('// bind\nFunction.prototype._bind = function (context, ...rest) {\n    // 判断当前的this类型必须是函数可以调用\n    if(typeof this !== "function"){\n        throw new Error("试图绑定的内容是不可调用的");\n    };\n    var self = this;\n    return function F(...args) {\n        /*如果是 new 的，则不要之前的 context 啦*/\n        if (this instanceof F) {\n            return self(...rest, ...args);\n        }\n        return self.apply(context, rest.concat(args));\n    }\n}\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br")])]),n("h2",{attrs:{id:"_9-闭包"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_9-闭包"}},[s._v("#")]),s._v(" 9. 闭包")]),s._v(" "),n("ul",[n("li",[s._v("闭包的定义很简单：函数 A 返回了一个函数 B，并且函数 B 中使用了函数 A 的变量，函数 B 就被称为闭包。举个简单的例子：")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("function A(){\n    let a = 1;\n    return function B(){\n        a++;\n        console.log(a);\n    }\n};\n\nlet add = A();\nadd(); // -> 2\nadd(); // -> 3\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br")])]),n("ul",[n("li",[s._v("为什么"),n("code",[s._v("函数A")]),s._v("已经弹出调用栈，"),n("code",[s._v("函数B")]),s._v("还能引用"),n("code",[s._v("函数A")]),s._v("中的变量。"),n("strong",[s._v("因为函数 A 中的变量这时候是存储在堆上的")]),s._v("。经典面试题：")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("for(var i = 1; i <= 5; i++){\n    setTimeout(function(){\n        console.log(i);\n    }, i*1000);\n}; // 每隔1秒输出一个6，一共5次\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("blockquote",[n("p",[s._v("因为 setTimeout 是个异步函数，所有会先把循环全部执行完毕，这时候 i 就是 6 了。")])]),s._v(" "),n("ul",[n("li",[s._v("解决方法有"),n("code",[s._v("4")]),s._v("种，另外一种采用"),n("code",[s._v("innerHTML")]),s._v("就不例举了，自行百度一下：")])]),s._v(" "),n("ol",[n("li",[s._v("闭包；")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("for(var i = 1; i <= 5; i++){\n    (function(i){\n        setTimeout(function(){\n            console.log(i);\n        }, i*1000);\n    })(i);\n};\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("ol",{attrs:{start:"2"}},[n("li",[s._v("let（块级作用域）；")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("for(let i = 1; i <= 5; i++){\n    setTimeout(function(){\n        console.log(i);\n    }, i*1000);\n};\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("ol",{attrs:{start:"3"}},[n("li",[s._v("setTimeout 的第三个参数；")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("for ( var i=1; i<=5; i++) {\n    setTimeout( function timer(j) {\n        console.log( j );\n    }, i*1000, i);\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("h2",{attrs:{id:"_10-浅拷贝"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_10-浅拷贝"}},[s._v("#")]),s._v(" 10. 浅拷贝")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("let a = {\n    age: 1\n};\nlet b = a;\na.age = 2;\nconsole.log(b.age); // -> 2\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("ul",[n("li",[s._v("上述例子可以发其中一方改变，另一方也会相应改变。**因为他们指向同一个引用。**我们可以使用"),n("code",[s._v("两种")]),s._v("方法解决这个问题：")])]),s._v(" "),n("ol",[n("li",[s._v("Object.assign；")]),s._v(" "),n("li",[s._v("展开运算符（...）；")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("let a = {\n    age: 1\n};\nlet b = Object.assign({}, a);\na.age = 2;\nconsole.log(b.age); // -> 1\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("let a= {\n    age: 1\n};\nlet b= {...a};\na.age = 2;\nconsole.log(b.age); // -> 1\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("ul",[n("li",[s._v("如果我们现在在"),n("code",[s._v("a对象")]),s._v("中再加一层，看看浅拷贝是否还可以解决以上问题：")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("let a = {\n    age: 1,\n    jobs: {\n        first: 'alipay'\n    };\n};\nlet b = {...a};\na.jobs.first = 'tencent';\nconsole.log(b.jobs.first) // -> tencent\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br")])]),n("ul",[n("li",[s._v("我们发现浅拷贝只是解决了第一层的问题，如果接下来的值中还有对象的话，要解决这个问题，我们就需要引入深拷贝了。")])]),s._v(" "),n("blockquote",[n("p",[s._v("关于深拷贝由于篇幅太长，可以移驾到我的另一篇 "),n("a",{attrs:{href:"deepClone"}},[s._v("深拷贝")]),s._v(" 去继续探索。")])]),s._v(" "),n("h2",{attrs:{id:"_11-http1-0、http1-1、http2-0-的区别"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_11-http1-0、http1-1、http2-0-的区别"}},[s._v("#")]),s._v(" 11. http1.0、http1.1、http2.0 的区别")]),s._v(" "),n("h2",{attrs:{id:"_12-get-和-post-的区别"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_12-get-和-post-的区别"}},[s._v("#")]),s._v(" 12. GET 和 POST 的区别")]),s._v(" "),n("table",[n("thead",[n("tr",[n("th",{staticStyle:{"text-align":"left"}},[n("strong",[s._v("GET")])]),s._v(" "),n("th",{staticStyle:{"text-align":"left"}},[n("strong",[s._v("POST")])])])]),s._v(" "),n("tbody",[n("tr",[n("td",{staticStyle:{"text-align":"left"}},[s._v("后续参数用"),n("code",[s._v(",")]),s._v("号分隔，可传多个参数")]),s._v(" "),n("td",{staticStyle:{"text-align":"left"}},[s._v("后续参数用数组进行传参")])])])]),s._v(" "),n("h2",{attrs:{id:"_13-http-状态码"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_13-http-状态码"}},[s._v("#")]),s._v(" 13. http 状态码")]),s._v(" "),n("h2",{attrs:{id:"_14-标准盒模型（w3c-盒模型）和-ie-盒模型（怪异盒模型）的区别"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_14-标准盒模型（w3c-盒模型）和-ie-盒模型（怪异盒模型）的区别"}},[s._v("#")]),s._v(" 14. 标准盒模型（w3c 盒模型）和 IE 盒模型（怪异盒模型）的区别")]),s._v(" "),n("table",[n("thead",[n("tr",[n("th",{staticStyle:{"text-align":"left"}},[n("strong",[s._v("标准盒模型（w3c 盒模型）")])]),s._v(" "),n("th",{staticStyle:{"text-align":"left"}},[n("strong",[s._v("IE 盒模型（怪异盒模型）")])])])]),s._v(" "),n("tbody",[n("tr",[n("td",{staticStyle:{"text-align":"left"}},[s._v("box-sizing: content-box;")]),s._v(" "),n("td",{staticStyle:{"text-align":"left"}},[s._v("box-sizing: border-box;")])]),s._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"left"}},[s._v("content（width、height）")]),s._v(" "),n("td",{staticStyle:{"text-align":"left"}},[s._v("content（width、height）包括 padding、border")])])])]),s._v(" "),n("ul",[n("li",[n("code",[s._v("标准盒模型（w3c 盒模型）")]),s._v("如下图：")])]),s._v(" "),n("p",[n("img",{attrs:{src:"/content_box.png",alt:"标准盒模型（w3c 盒模型）"}})]),s._v(" "),n("ul",[n("li",[n("code",[s._v("IE 盒模型（怪异盒模型）")]),s._v("如下图：")])]),s._v(" "),n("p",[n("img",{attrs:{src:"/border_box.png",alt:"IE 盒模型（怪异盒模型）"}})]),s._v(" "),n("h2",{attrs:{id:"_15-继承"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_15-继承"}},[s._v("#")]),s._v(" 15. 继承")]),s._v(" "),n("ul",[n("li",[s._v("继承分为"),n("code",[s._v("原型链继承、构造函数继承、组合式继承、寄生式组合式继承")]),s._v("四种。")])]),s._v(" "),n("h3",{attrs:{id:"原型链继承"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#原型链继承"}},[s._v("#")]),s._v(" 原型链继承")]),s._v(" "),n("ul",[n("li",[s._v("核心思想就是"),n("strong",[s._v("利用自子类的原型对象向父级的实例")]),s._v("来继承父级的属性和方法。上代码：")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('// 父类\nfunction Parnet() {\n    this.names = ["学而不思则罔", "思而不学则殆"];\n}\n\n// 父类的原型上挂载一个方法\nParnet.prototype.getName = function() {\n    console.log(this.names);\n};\n\n// 子类\nfunction Child() {}\n\n// 利用自子类的原型对象向父级的实例来继承父级的属性和方法\nChild.prototype = new Parnet();\n// 修正一下contructor指针指向子类\nChild.prototype.constructor = Child;\n\nconst child1 = new Child();\nchild1.names.push("加油");\nconst child2 = new Child();\n\nconsole.log(\'child1: \', child1);\nconsole.log(\'child2: \', child2);\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br")])]),n("p",[s._v("如图所示：")]),s._v(" "),n("p",[n("img",{attrs:{src:"/%E5%8E%9F%E5%9E%8B%E9%93%BE%E7%BB%A7%E6%89%BF.png",alt:"原型链继承"}})]),s._v(" "),n("ul",[n("li",[s._v("我们发现子类已经继承了父类的属性和方法。但是我们又可以发现"),n("code",[s._v("两个问题")]),s._v("：")])]),s._v(" "),n("ol",[n("li",[s._v("某个子类实例的属性修改会影响另外一个子类，因为他们都是由同一个父类构造出来的；")]),s._v(" "),n("li",[s._v("子类不可以传参；")])]),s._v(" "),n("h3",{attrs:{id:"构造函数继承"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#构造函数继承"}},[s._v("#")]),s._v(" 构造函数继承")]),s._v(" "),n("ul",[n("li",[s._v("核心思想就是"),n("strong",[s._v("子类构造函数中执行父类构造函数，并为其绑定子类的 this")]),s._v("。上代码：")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('function Parnet(name) {\n    console.log("name: ", name);\n    this.names = ["学而不思则罔", "思而不学则殆"];\n}\n\nParnet.prototype.getName = function() {\n    console.log(this.names);\n};\n\nfunction Child(name) {\n    Parnet.call(this, name);\n}\n\nconst child1 = new Child("这是子类1传的值");\nchild1.names.push("加油");\nconst child2 = new Child("这是子类2传的值");\n\nconsole.log("child1: ", child1);\nconsole.log("child2: ", child2);\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br")])]),n("p",[s._v("如图所示：")]),s._v(" "),n("p",[n("img",{attrs:{src:"/%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E7%BB%A7%E6%89%BF.png",alt:"原型链继承"}})]),s._v(" "),n("ul",[n("li",[s._v("优点：")])]),s._v(" "),n("ol",[n("li",[s._v("解决了子类共享一个父类的问题；")]),s._v(" "),n("li",[s._v("子类不能传参的问题；")])]),s._v(" "),n("ul",[n("li",[s._v("缺点：")])]),s._v(" "),n("ol",[n("li",[s._v("父类的方法丢失了；")])]),s._v(" "),n("h3",{attrs:{id:"组合继承"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#组合继承"}},[s._v("#")]),s._v(" 组合继承")]),s._v(" "),n("ul",[n("li",[s._v("既然"),n("code",[s._v("原型链继承")]),s._v("和"),n("code",[s._v("构造函数继承")]),s._v("各有优缺点，是否可以中和一下他们的优点呢。上代码：")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('function Parnet(name) {\nconsole.log("name: ", name);\n    this.names = ["学而不思则罔", "思而不学则殆"];\n}\n\nParnet.prototype.getName = function() {\n    console.log(this.names);\n};\n\nfunction Child(name) {\n    Parnet.call(this, name);\n}\n\nChild.prototype = new Parnet();\nChild.prototype.constructor = Child;\n\nconst child1 = new Child("这是子类1传的值");\nchild1.names.push("加油");\nconsole.log("child1: ", child1);\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br")])]),n("p",[s._v("如图所示：")]),s._v(" "),n("p",[n("img",{attrs:{src:"/%E7%BB%84%E5%90%88%E7%BB%A7%E6%89%BF.png",alt:"组合继承"}})]),s._v(" "),n("p",[s._v("缺点：")]),s._v(" "),n("ol",[n("li",[s._v("父类的构造函数被执行了两遍，第一遍是 call 的时候执行了一次，第二遍是 new 的过程中又执行了一次；")]),s._v(" "),n("li",[s._v("原型中存在两份相同的属性；")])]),s._v(" "),n("h3",{attrs:{id:"寄生式组合继承"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#寄生式组合继承"}},[s._v("#")]),s._v(" 寄生式组合继承")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('function Parnet(name) {\n    console.log("name: ", name);\n    this.names = ["学而不思则罔", "思而不学则殆"];\n}\n\nParnet.prototype.getName = function() {\n    console.log(this.names);\n};\n\nfunction Child(name) {\n    Parnet.call(this, name);\n}\n\nChild.prototype = Object.create(Parnet.prototype,{\n    constructor: {\n        value: Child\n    });\nChild.prototype.constructor = Child;\n\nconst child1 = new Child("这是子类1传的值");\nchild1.names.push("加油");\nconsole.log("child1: ", child1);\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br")])]),n("p",[s._v("如图所示：")]),s._v(" "),n("p",[n("img",{attrs:{src:"/%E5%AF%84%E7%94%9F%E5%BC%8F%E7%BB%84%E5%90%88%E7%BB%A7%E6%89%BF.png",alt:"寄生式组合继承"}})]),s._v(" "),n("ul",[n("li",[s._v("终于完美的继承了父类的属性和方法。")])]),s._v(" "),n("h2",{attrs:{id:"_16-防抖和节流"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_16-防抖和节流"}},[s._v("#")]),s._v(" 16. 防抖和节流")]),s._v(" "),n("h3",{attrs:{id:"防抖"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#防抖"}},[s._v("#")]),s._v(" 防抖")]),s._v(" "),n("ul",[n("li",[s._v("原理："),n("strong",[s._v("在事件被触发 n 秒后再执行回调，如果在这 n 秒内又被触发，则重新计时。")])]),s._v(" "),n("li",[s._v("适用场景：")])]),s._v(" "),n("ol",[n("li",[s._v("搜索框联想，不用发送多次请求，只发送最后一次（搜索一个商品名字的时候）；")]),s._v(" "),n("li",[s._v("按钮提交，防止多次提交按钮。（点击付款按钮支付的时候）；")])]),s._v(" "),n("ul",[n("li",[s._v("简单版实现（场景 1）：")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// func：被执行的函数     wait：等待的秒数\nfunction debounce(func, wait) {\n    let timer;\n    return function() {\n        clearTimeout(timer);\n        timer = setTimeout(() => {\n            func.apply(this, arguments);\n        }, wait);\n    };\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")])]),n("ul",[n("li",[s._v("立刻执行版（场景 2）")]),s._v(" "),n("li",[s._v("有时希望立刻执行函数，然后间隔"),n("code",[s._v("n")]),s._v("秒后，才可以重新触发执行。")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// func：被执行的函数     wait：等待的秒数     now：是否立刻执行 true 或者 false\nfunction debounce(func, wait, now) {\n    let timer;\n    return function() {\n        clearTimeout(timer);\n        if (now) {\n            const _now = !timer;\n            timer = setTimeout(() => {\n                timer = null;\n            }, wait);\n            if (_now) func.apply(this, arguments);\n        } else {\n            timer = setTimeout(() => {\n                func.apply(this, arguments);\n            }, wait);\n        }\n    };\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br")])]),n("h3",{attrs:{id:"节流"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#节流"}},[s._v("#")]),s._v(" 节流")]),s._v(" "),n("ul",[n("li",[s._v("原理："),n("strong",[s._v("规定在一个单位时间内，只能触发一次函数。如果这个单位时间内触发多次函数，只有一次生效。")])]),s._v(" "),n("li",[s._v("适用场景：")])]),s._v(" "),n("ol",[n("li",[s._v("拖拽场景：防止高频次触发位置变动")]),s._v(" "),n("li",[s._v("缩放场景：监控浏览器 resize")])]),s._v(" "),n("ul",[n("li",[s._v("使用定时器实现：触发事件时，设置一个定时器，再触发事件的时候，如果定时器存在，就不执行。知道定时器执行完，然后清空定时器，执行函数。")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// func：被执行的函数     wait：等待的秒数\nfunction throttle(func, wait) {\n    let timer;\n    return function() {\n        if (!timer) {\n            timer = setTimeout(() => {\n                timer = null;\n                func.apply(this, arguments);\n            }, wait);\n        }\n    };\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br")])]),n("ul",[n("li",[s._v("使用时间戳：触发事件的时候，取一下当前的时间戳，减去最开始的时间戳。如果大于设置的时间周期，就执行函数，然后更新时间戳为当前的时间戳，如果小于，就不执行。")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// func：被执行的函数     wait：等待的秒数\n// 需要注意一上来就会先执行一次\nfunction throttle(func, wait) {\n    let context, args;\n    let startTime = 0;\n\n    return function() {\n        let nowTime = +new Date();\n        context = this;\n        args = arguments;\n        if (nowTime - startTime > wait) {\n            func.apply(context, args);\n            startTime = nowTime;\n        }\n    };\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br")])]),n("h2",{attrs:{id:"_17-tcp-和-udp-的区别"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_17-tcp-和-udp-的区别"}},[s._v("#")]),s._v(" 17. TCP 和 UDP 的区别")]),s._v(" "),n("table",[n("thead",[n("tr",[n("th",{staticStyle:{"text-align":"center"}}),s._v(" "),n("th",{staticStyle:{"text-align":"center"}},[s._v("UDP")]),s._v(" "),n("th",{staticStyle:{"text-align":"center"}},[s._v("TCP")])])]),s._v(" "),n("tbody",[n("tr",[n("td",{staticStyle:{"text-align":"center"}},[s._v("是否连接")]),s._v(" "),n("td",{staticStyle:{"text-align":"center"}},[s._v("无连接")]),s._v(" "),n("td",{staticStyle:{"text-align":"center"}},[s._v("面向连接")])]),s._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"center"}},[s._v("是否可靠")]),s._v(" "),n("td",{staticStyle:{"text-align":"center"}},[s._v("不可靠传输，不使用流量控制和拥塞控制")]),s._v(" "),n("td",{staticStyle:{"text-align":"center"}},[s._v("可靠传输，使用流量控制和拥塞控制")])]),s._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"center"}},[s._v("连接对象个数")]),s._v(" "),n("td",{staticStyle:{"text-align":"center"}},[s._v("支持一对一，一对多，多对一和多对多交互通信")]),s._v(" "),n("td",{staticStyle:{"text-align":"center"}},[s._v("只能是一对一通信")])]),s._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"center"}},[s._v("传输方式")]),s._v(" "),n("td",{staticStyle:{"text-align":"center"}},[s._v("面向报文")]),s._v(" "),n("td",{staticStyle:{"text-align":"center"}},[s._v("面向字节流")])]),s._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"center"}},[s._v("首部开销")]),s._v(" "),n("td",{staticStyle:{"text-align":"center"}},[s._v("首部开销小，仅 8 字节")]),s._v(" "),n("td",{staticStyle:{"text-align":"center"}},[s._v("首部最小 20 字节，最大 60 字节")])]),s._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"center"}},[s._v("适用场景")]),s._v(" "),n("td",{staticStyle:{"text-align":"center"}},[s._v("适用于实时应用（IP 电话、视频会议、直播等）")]),s._v(" "),n("td",{staticStyle:{"text-align":"center"}},[s._v("适用于要求可靠传输的应用，例如文件传输")])])])])])}),[],!1,null,null,null);t.default=e.exports}}]);