(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{379:function(s,a,e){"use strict";e.r(a);var n=e(45),t=Object(n.a)({},(function(){var s=this,a=s.$createElement,e=s._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h1",{attrs:{id:"红宝石4"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#红宝石4"}},[s._v("#")]),s._v(" 红宝石4")]),s._v(" "),e("h2",{attrs:{id:"_1-什么是-javascript"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-什么是-javascript"}},[s._v("#")]),s._v(" 1. 什么是 JavaScript")]),s._v(" "),e("p",[s._v("完整的 JavaScript 实现包含以下几个部分：")]),s._v(" "),e("ul",[e("li",[s._v("核心(ECMAScript262)：由 ECMA-262 定义并提供核心功能；")]),s._v(" "),e("li",[s._v("文档对象模型(DOM Document Object Model)：提供与网页内容交互的方法和接口；")]),s._v(" "),e("li",[s._v("浏览器对象模型(BOM Bower Object Model)：提供与浏览器交互的方法和接口；")])]),s._v(" "),e("p",[e("img",{attrs:{src:"/javascript.png",alt:""}})]),s._v(" "),e("h2",{attrs:{id:"_2-html-中的-javascript"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-html-中的-javascript"}},[s._v("#")]),s._v(" 2. HTML 中的 JavaScript")]),s._v(" "),e("p",[e("strong",[s._v("script")]),s._v(" 元素几个重要的属性：")]),s._v(" "),e("ul",[e("li",[e("code",[s._v("async")]),s._v("：表示脚本不需要等待其他脚本，同时也不阻塞文档渲染，即异步加载。异步脚本不能保证按照它们在页面中出现的次序执行；")]),s._v(" "),e("li",[e("code",[s._v("defer")]),s._v("：把脚本推迟到文档渲染完毕后再执行。推迟的脚本原则上按照它们被列出的次序执行；")])]),s._v(" "),e("p",[s._v("对不推迟执行的脚本，浏览器必须解释完位于 "),e("strong",[s._v("script")]),s._v(" 元素中的代码，然后才能继续渲染页面的剩余部分。为此，通常应该把 "),e("strong",[s._v("script")]),s._v(" 元素放到页面末尾，介于主内容之后及 "),e("code",[s._v("</body>")]),s._v(" 标签 之前。否则会出现以下问题：")]),s._v(" "),e("blockquote",[e("p",[s._v("浏览器窗口完全空白，"),e("strong",[s._v("原因")]),s._v("：必须把所有 "),e("strong",[s._v("JavaScript")]),s._v(" 代码都"),e("strong",[s._v("下载、解析和解释")]),s._v("完成后，才能开始渲染页面。对于需要很多 "),e("strong",[s._v("JavaScript")]),s._v(" 的页面，这会导致页面渲染的明显延迟。")])]),s._v(" "),e("h2",{attrs:{id:"_3-语言基础"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-语言基础"}},[s._v("#")]),s._v(" 3. 语言基础")]),s._v(" "),e("h3",{attrs:{id:"❤️3-1-1-变量-var"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#❤️3-1-1-变量-var"}},[s._v("#")]),s._v(" ❤️3.1.1 变量 - var")]),s._v(" "),e("p",[s._v("用来定义变量。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("var num = 666；\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("blockquote",[e("p",[s._v("注意点：这个关键字声明的变量会自动提升到函数作用域顶部。俗称”变量提升“。")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("// name 会被提升 \nconsole.log(name); // undefined \nvar name = 'Matt';\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("h3",{attrs:{id:"_3-1-2-变量-let"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-2-变量-let"}},[s._v("#")]),s._v(" 3.1.2 变量 - let")]),s._v(" "),e("p",[e("code",[s._v("let")]),s._v(" 跟 "),e("code",[s._v("var")]),s._v(" 的作用差不多，但有着非常重要的区别。最明显的区别是，"),e("code",[s._v("let")]),s._v(" 声明的范围是块作用域， 而 "),e("code",[s._v("var")]),s._v(" 声明的范围是函数作用域。")]),s._v(" "),e("p",[e("strong",[s._v("1. 暂时性死区")])]),s._v(" "),e("p",[s._v("let 声明的变量不会在作用域中被提升。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("// age 不会被提升\nconsole.log(age); // ReferenceError:age 没有定义 \nlet age = 26;\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("p",[e("strong",[s._v("2. 全局声明")])]),s._v(" "),e("p",[s._v("与 "),e("code",[s._v("var")]),s._v(" 关键字不同，使用 "),e("code",[s._v("let")]),s._v(" 在全局作用域中声明的变量不会成为 "),e("code",[s._v("window")]),s._v(" 对象的属性(var 声明的变量则会)。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("var name = 'Matt'; \nconsole.log(window.name); // 'Matt'\n\nlet age = 26;\nconsole.log(window.age); // undefined\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("h3",{attrs:{id:"_3-1-3-变量-const"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-3-变量-const"}},[s._v("#")]),s._v(" 3.1.3 变量 - const")]),s._v(" "),e("p",[e("code",[s._v("const")]),s._v(" 的行为与 "),e("code",[s._v("let")]),s._v(" 基本相同，唯一一个重要的区别是用它声明变量时必须同时初始化变量，且尝试修改 "),e("code",[s._v("const")]),s._v(" 声明的变量会导致运行时错误。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("const age = 26;\nage = 36; // TypeError\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("p",[e("code",[s._v("const")]),s._v(" 声明的限制只适用于它指向的变量的引用。换句话说，如果 "),e("code",[s._v("const")]),s._v(" 变量引用的是一个对象，那么修改这个对象内部的属性并不违反 "),e("code",[s._v("const")]),s._v(" 的限制。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("const person = {};\nperson.name = 'Matt'; // ok\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("h3",{attrs:{id:"_3-1-4-变量-总结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-4-变量-总结"}},[s._v("#")]),s._v(" 3.1.4 变量 - 总结")]),s._v(" "),e("p",[e("strong",[s._v("1. 不使用 var")])]),s._v(" "),e("p",[s._v("只使用 "),e("code",[s._v("let")]),s._v(" 和 "),e("code",[s._v("const")]),s._v(" 有助于提升代码质量，因为变量有了明确的作用域、声明位置，以及不变的值。")]),s._v(" "),e("p",[e("strong",[s._v("2. const 优先，let 次之")])]),s._v(" "),e("p",[s._v("使用 "),e("code",[s._v("const")]),s._v(" 声明可以让浏览器运行时强制保持变量不变，也可以让静态代码分析工具提前发现不合法的赋值操作。同时也能迅速发现因意外赋值导致的非预期行为。")]),s._v(" "),e("h3",{attrs:{id:"_3-2-1-数据类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-1-数据类型"}},[s._v("#")]),s._v(" 3.2.1 数据类型")]),s._v(" "),e("p",[s._v("简单数据类型（原始值）："),e("code",[s._v("Undefined、Null、Boolean、Number、String 和 Symbol")]),s._v("。")]),s._v(" "),e("p",[s._v("复杂数据类型（引用值）："),e("code",[s._v("Object")]),s._v("。")]),s._v(" "),e("h3",{attrs:{id:"_3-2-2-typeof操作符"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-2-typeof操作符"}},[s._v("#")]),s._v(" 3.2.2 typeof操作符")]),s._v(" "),e("p",[s._v("确定任意变量的数据类型。")]),s._v(" "),e("blockquote",[e("p",[s._v('注意：typeof null 返回的是"object"。这是因为特殊值 null 被认为是一个对空对象的引用。')])]),s._v(" "),e("h3",{attrs:{id:"_3-2-3-undefined类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-3-undefined类型"}},[s._v("#")]),s._v(" 3.2.3 Undefined类型")]),s._v(" "),e("p",[s._v("当使用 "),e("code",[s._v("var")]),s._v(" 或 "),e("code",[s._v("let")]),s._v(" 声明了变量但没有初始化时，就相当于给变量赋予了 "),e("code",[s._v("undefined")]),s._v(" 值。")]),s._v(" "),e("h3",{attrs:{id:"_3-2-4-null类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-4-null类型"}},[s._v("#")]),s._v(" 3.2.4 Null类型")]),s._v(" "),e("p",[e("code",[s._v("null")]),s._v(" 值表示一个空对象指针，这也是给 "),e("code",[s._v("typeof")]),s._v(" 传一个 "),e("code",[s._v("null")]),s._v(' 会返回"object"的原因。在定义将来要保存对象值的变量时，建议使用 '),e("code",[s._v("null")]),s._v(" 来初始化，不要使用其他值。")]),s._v(" "),e("h3",{attrs:{id:"_3-2-5-boolean类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-5-boolean类型"}},[s._v("#")]),s._v(" 3.2.5 Boolean类型")]),s._v(" "),e("p",[e("code",[s._v("true")]),s._v(" 和 "),e("code",[s._v("false")]),s._v("。")]),s._v(" "),e("blockquote",[e("p",[s._v("注意：不同类型与布尔值之间存在隐式转换。非空字符串、非0、任意对象会被转换为 true。空（''）、零（0、NaN）、空对象（null）、undefined会被转换为 false。")])]),s._v(" "),e("h3",{attrs:{id:"_3-2-6-number类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-6-number类型"}},[s._v("#")]),s._v(" 3.2.6 Number类型")]),s._v(" "),e("p",[e("code",[s._v("Number")]),s._v(" 类型使用 "),e("code",[s._v("IEEE 754")]),s._v(" 格式表示整数和浮点值(在某些语言中也叫双精度值)。")]),s._v(" "),e("p",[e("strong",[s._v("1. 数值转换 - Number()函数")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('Number(true) = 1; Number(false) = 0; // 布尔值\nNumber(123) = 123 // 数值;\nNumber(null) = 0 // null;\nNumber(undefined) = NaN // undefined类型;\nNumber("123") = 123; Number("0123") = 123; Number("1.1") = 1.1; Number(" ") = 0; Number("Hello") = NaN; // 字符串\n对象：调用 valueOf()方法，并按照上述规则转换返回的值。如果转换结果是 NaN，则调用 toString()方法，再按照转换字符串的规则转换。\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br")])]),e("p",[e("strong",[s._v("2. 数值转换 - parseInt()函数")])]),s._v(" "),e("p",[s._v("通常在需要得到整数时可以优先使用。也接收第二个参数，用于指定底数(进制数)。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('parseInt("123cheers") = 123;\nparseInt("") = NaN;\nparseInt(22.5) = 22;\nparseInt("10", 10) = 10; // 按十进制解析\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("p",[e("strong",[s._v("3. 数值转换 - parseFloat()函数")])]),s._v(" "),e("p",[s._v("解析到一个无效的浮点数值字符为止。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('parseInt("123cheers") = 123;\nparseInt("") = NaN;\nparseInt(22.5) = 22.5;\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("h3",{attrs:{id:"_3-2-7-string类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-7-string类型"}},[s._v("#")]),s._v(" 3.2.7 String类型")]),s._v(" "),e("p",[e("strong",[s._v("1. 模板字面量")])]),s._v(" "),e("p",[s._v("常用特性是支持字符串插值")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('let pageHTML = ` \n<div> \n    <a href="#"> \n        <span>Jake</span> \n    </a> \n</div>`;\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br")])]),e("p",[s._v("其中变量用 "),e("code",[s._v("${}")]),s._v(" 来表示")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("let num = 666;\nconst str = `你的幸运数字是${num}` // 你的幸运数字是666\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("h3",{attrs:{id:"_3-2-8-symbol类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-8-symbol类型"}},[s._v("#")]),s._v(" 3.2.8 Symbol类型")]),s._v(" "),e("p",[e("code",[s._v("Symbol")]),s._v(" 是原始值，且实例是唯一、不可变的。用途是确保对象属性使用"),e("strong",[s._v("唯一标识符")]),s._v("，不会发生属性冲突的危险。")]),s._v(" "),e("p",[e("strong",[s._v("1. 基本用法")])]),s._v(" "),e("p",[s._v("使用 "),e("code",[s._v("Symbol()")]),s._v(" 函数初始化，调用时，也可以传入一个字符串参数作为对符号的描述，将来可以通过这个字符串来调试代码。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("let easySymbol = Symbol('cxh');\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("因为是唯一，所以两个看起来相同的 "),e("code",[s._v("Symbol")]),s._v(" 却不相同。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("let easySymbol1 = Symbol('cxh');\nlet easySymbol2 = Symbol('cxh');\n\nconsole.log(easySymbol1 == easySymbol2); // false\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("p",[s._v("如果想让它们相同，可以使用 "),e("code",[s._v("Symbol.for()")]),s._v(" 方法。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("let easySymbol1 = Symbol.for('cxh');\nlet easySymbol2 = Symbol.for('cxh');\n\nconsole.log(easySymbol1 == easySymbol2); // true\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("blockquote",[e("p",[s._v("注意：Symbol()函数不能与 new 关键字一起作为构造函数使用。")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("let mySymbol = new Symbol(); // TypeError: Symbol is not a constructor\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("ul",[e("li",[e("code",[s._v("Object.getOwnPropertyNames()")]),s._v(" 返回对象实例的常规属性数组。")]),s._v(" "),e("li",[e("code",[s._v("Object.getOwnPropertySymbols()")]),s._v(" 返回对象实例的 "),e("strong",[s._v("符号")]),s._v(" 属性数组。")]),s._v(" "),e("li",[e("code",[s._v("Reflect.ownKeys()")]),s._v(" 会返回两种类型的键。")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("let s1 = Symbol('foo'); \n\nlet o = { \n [s1]: 'foo val', \n baz: 'baz val'\n}; \n\nconsole.log(Object.getOwnPropertySymbols(o));  // [Symbol(foo)] \n\nconsole.log(Object.getOwnPropertyNames(o));  // [\"baz\"] \n\nconsole.log(Reflect.ownKeys(o));  // [\"baz\", Symbol(foo)]\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br")])]),e("p",[e("strong",[s._v("2. Symbol.iterator")])]),s._v(" "),e("p",[s._v("该方法返回对象默认的迭代器。由 "),e("code",[s._v("for-of")]),s._v(" 语句使用。换句话说，这个符号表示实现迭代器 API 的函数。 "),e("code",[s._v("Symbol.iterator")]),s._v(" 函数生成的对象应该通过其 "),e("code",[s._v("next()")]),s._v(" 方法陆续返回值。")]),s._v(" "),e("h3",{attrs:{id:"_3-2-9-object-类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-9-object-类型"}},[s._v("#")]),s._v(" 3.2.9 Object 类型")]),s._v(" "),e("p",[s._v("每个 "),e("code",[s._v("Object")]),s._v(" 实例都有如下属性和方法。")]),s._v(" "),e("ul",[e("li",[s._v("constructor：用于创建当前对象的函数。")]),s._v(" "),e("li",[s._v("hasOwnProperty(propertyName)：用于判断当前对象实例（不是原型）上是否存在给定的属性。")])]),s._v(" "),e("h3",{attrs:{id:"_3-3-操作符"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-操作符"}},[s._v("#")]),s._v(" 3.3 操作符")]),s._v(" "),e("h3",{attrs:{id:"_3-3-1-一元操作符"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-1-一元操作符"}},[s._v("#")]),s._v(" 3.3.1 一元操作符")]),s._v(" "),e("p",[s._v("前缀递增/递减操作符，变量的值都会在语句被"),e("strong",[s._v("求值之前")]),s._v("改变。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("let age = 29;\nlet nextage = --age + 1;\n\nconsole.log(age); // 28 \nconsole.log(nextage); // 30\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("p",[s._v("后缀递增/递减操作符，变量的值都会在语句被"),e("strong",[s._v("求值后")]),s._v("才发生。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("let age = 29;\nlet nextage = age-- + 1;\n\nconsole.log(age); // 29 \nconsole.log(nextage); // 30\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("h3",{attrs:{id:"_3-3-2-布尔操作符"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-2-布尔操作符"}},[s._v("#")]),s._v(" 3.3.2 布尔操作符")]),s._v(" "),e("p",[e("code",[s._v("!!")]),s._v(" 相当于调用了转型函数 "),e("code",[s._v("Boolean()")]),s._v("。第一个叹号总会返回布尔值。第二个叹号对该布尔值取反。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('console.log(!!"blue"); // true \nconsole.log(!!0); // false \nconsole.log(!!NaN); // false \nconsole.log(!!""); // false \nconsole.log(!!12345); // true\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("h3",{attrs:{id:"_3-4-语句"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-语句"}},[s._v("#")]),s._v(" 3.4 语句")]),s._v(" "),e("h3",{attrs:{id:"_3-4-1-while-语句"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-1-while-语句"}},[s._v("#")]),s._v(" 3.4.1 while 语句")]),s._v(" "),e("p",[s._v("先检测退出条件，再执行循环体内的代码。while 循环体内的代码有可能不会执行。")]),s._v(" "),e("h3",{attrs:{id:"_3-4-2-for-in-语句"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-2-for-in-语句"}},[s._v("#")]),s._v(" 3.4.2 for-in 语句")]),s._v(" "),e("p",[s._v("用于枚举对象中的非符号键属性。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("const person = {\n    name: 'cxh',\n    age: 18\n};\n\nfor(let key in person){\n    console.log(key); // name age\n};\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br")])]),e("h3",{attrs:{id:"_3-4-3-for-of-语句"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-3-for-of-语句"}},[s._v("#")]),s._v(" 3.4.3 for-of 语句")]),s._v(" "),e("p",[s._v("用于遍历可迭代对象的元素。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("const person = [\n    {name: 'cxh', age: 18},\n    {name: 'zq', age: 28}\n];\n\nfor(let item of person){\n    console.log(item); // {name: \"cxh\", age: 18} {name: \"zq\", age: 28}\n};\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br")])]),e("h2",{attrs:{id:"_4-变量、作用域与内存"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-变量、作用域与内存"}},[s._v("#")]),s._v(" 4. 变量、作用域与内存")]),s._v(" "),e("h3",{attrs:{id:"_4-1-原始值与引用值"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-原始值与引用值"}},[s._v("#")]),s._v(" 4.1 原始值与引用值")]),s._v(" "),e("p",[e("strong",[s._v("原始值")]),s._v("就是最简单的数据，"),e("strong",[s._v("引用值")]),s._v("则是由多个值构成的对象。保存"),e("strong",[s._v("原始值")]),s._v("的变量是"),e("strong",[s._v("按值")]),s._v("访问的。保存"),e("strong",[s._v("引用值")]),s._v("的变量是按"),e("strong",[s._v("引用")]),s._v("访问的。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("// 原始值\nlet num1 = 5;\nlet num2 = num1;\n\nnum1 = 30;\n\nconsole.log(num1); // 30\nconsole.log(num2); // 5\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br")])]),e("p",[e("img",{attrs:{src:"/data_val.png",alt:""}})]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("// 引用值\nconst person1 = {\n    name: 'cxh'\n};\n\nconst person2 = person1;\nperson1.name = 'zq';\n\nconsole.log(person1); // zq\nconsole.log(person2); // zq\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br")])]),e("p",[e("img",{attrs:{src:"/data_obj.png",alt:""}})]),s._v(" "),e("h3",{attrs:{id:"_4-2-垃圾回收"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-垃圾回收"}},[s._v("#")]),s._v(" 4.2 垃圾回收")]),s._v(" "),e("h3",{attrs:{id:"_4-2-1-标记清除"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-1-标记清除"}},[s._v("#")]),s._v(" 4.2.1 标记清除")]),s._v(" "),e("p",[s._v("最常用的垃圾回收策略是 "),e("strong",[s._v("标记清理")]),s._v("。")]),s._v(" "),e("p",[s._v("垃圾回收程序运行的时候，会标记内存中存储的所有变量。然后，它会将所有在上下文中的变量，以及被在上下文中的变量引用的变量的标记去掉。在此之后再被加上标记的变量就是待删除的了，原因是任何在上下文中的变量都访问不到它们了。随后垃圾回收程序做一次内存清理，销毁带标记的所有值并收回它们的内存。")]),s._v(" "),e("h3",{attrs:{id:"_4-2-2-引用计数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-2-引用计数"}},[s._v("#")]),s._v(" 4.2.2 引用计数")]),s._v(" "),e("p",[s._v("对每个值都记录它被引用的次数。声明变量并给它赋一个引用值时，这个值的引用数为 1。如果同一个值又被赋给另一个变量，那么引用数加 1。类似地，如果保存对该值引用的变量被其他值给覆盖了，那么引用数减 1。当一个值的引用数为 0 时，就说明没办法再访问到这个值了，因此可以安全地收回其内存了。垃圾回收程序下次运行的时候就会释放引用数为 0 的值的内存。")]),s._v(" "),e("blockquote",[e("p",[s._v("严重的问题：循环引用。对象 A 有一个指针指向对象 B，而对象 B 也引用了对象 A。")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("function problem() { \n    let objectA = new Object(); \n    let objectB = new Object(); \n\n    objectA.someOtherObject = objectB; \n    objectB.anotherObject = objectA; \n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br")])]),e("h3",{attrs:{id:"_4-2-3-内存管理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-3-内存管理"}},[s._v("#")]),s._v(" 4.2.3 内存管理")]),s._v(" "),e("p",[e("strong",[s._v("1. 通过 const 和 let 声明提升性能")])]),s._v(" "),e("p",[e("strong",[s._v("const 和 let")]),s._v(" 都以块为作用域，所以对比 "),e("strong",[s._v("var")]),s._v("，会更早地让垃圾回收程序介入，今早回收应该回收的内存。")]),s._v(" "),e("p",[e("strong",[s._v("2. 隐藏类和删除操作")])])])}),[],!1,null,null,null);a.default=t.exports}}]);