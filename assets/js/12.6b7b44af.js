(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{367:function(s,n,t){"use strict";t.r(n);var e=t(45),a=Object(e.a)({},(function(){var s=this,n=s.$createElement,t=s._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"🌈-react-函数式组件优化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#🌈-react-函数式组件优化"}},[s._v("#")]),s._v(" 🌈 React 函数式组件优化")]),s._v(" "),t("h2",{attrs:{id:"_1-react-性能优化思路"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-react-性能优化思路"}},[s._v("#")]),s._v(" 1. React 性能优化思路")]),s._v(" "),t("ol",[t("li",[s._v("减少重新 "),t("code",[s._v("render")]),s._v(" 的次数。")]),s._v(" "),t("li",[s._v("减少计算的量。主要是减少重复计算，对于函数式组件来说，每次 "),t("code",[s._v("render")]),s._v(" 都会重新从头开始执行函数调用。")])]),s._v(" "),t("ul",[t("li",[s._v("在使用类组件"),t("code",[s._v("（class）")]),s._v("的时候，使用的 "),t("code",[s._v("React")]),s._v(" 优化 API 主要是："),t("code",[s._v("shouldComponentUpdate")]),s._v(" 和 "),t("code",[s._v("PureComponent")]),s._v("，都是为了减少重新 "),t("code",[s._v("render")]),s._v(" 的次数，主要是减少父组件更新而子组件也更新的情况。")])]),s._v(" "),t("h2",{attrs:{id:"_2-函数组件优化方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-函数组件优化方法"}},[s._v("#")]),s._v(" 2. 函数组件优化方法")]),s._v(" "),t("h3",{attrs:{id:"_2-1-react-memo-减少-render-的次数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-react-memo-减少-render-的次数"}},[s._v("#")]),s._v(" 2.1 React.memo （减少 render 的次数）")]),s._v(" "),t("p",[s._v("可以减少重新 "),t("code",[s._v("render")]),s._v(" 的次数，对标类组件里面的 "),t("code",[s._v("PureComponent")]),s._v("。")]),s._v(" "),t("p",[s._v("举个简单的🌰 ：")]),s._v(" "),t("ul",[t("li",[s._v("修改父组件 "),t("strong",[s._v("title")]),s._v(" 的时候同时传递给子组件一个 "),t("em",[s._v("name")]),s._v(" 值。")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('// 父组件\nimport React, { useState } from "react";\nimport ReactDOM from "react-dom";\nimport Child from \'./child\'\n\nfunction Father() {\n  const [title, setTitle] = useState("父组件的title");\n\n  return (\n    <div className="Father">\n      <h1>{ title }</h1>\n      <button onClick={() => setTitle("父组件的title改变了")}>修改父组件的title</button>\n      <Child name="父组件传递给子组件的值"></Child>\n    </div>\n  );\n}\n\nconst rootElement = document.getElementById("root");\nReactDOM.render(<Father />, rootElement);\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br")])]),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('// 子组件\nimport React from "react";\n\nfunction Child(props) {\n  console.log(props.name)\n  return <p>{props.name}</p>\n}\n\nexport default Child;\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br")])]),t("ul",[t("li",[s._v("首次渲染的效果如下：")])]),s._v(" "),t("p",[t("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b7ba075562974ef4a081fdfd39d1166c~tplv-k3u1fbpfcp-zoom-1.image",alt:""}})]),s._v(" "),t("ul",[t("li",[s._v("并且在控制台会打印 "),t("strong",[s._v('"父组件传递给子组件的值"')]),s._v("，说明 "),t("code",[s._v("Child")]),s._v(" 组件渲染了。")]),s._v(" "),t("li",[s._v("接下来点击 "),t("strong",[s._v("修改父组件的title")]),s._v(" 这个button，页面会变成：")])]),s._v(" "),t("p",[t("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f8080c52b5114ec0a315a26bd3301e48~tplv-k3u1fbpfcp-zoom-1.image",alt:""}})]),s._v(" "),t("ul",[t("li",[s._v("可见 父组件的"),t("code",[s._v("title")]),s._v(" 已经改变了，而且控制台再次打印了 "),t("strong",[s._v('"父组件传递给子组件的值"')]),s._v("。子组件在 "),t("code",[s._v("props")]),s._v(" 没有改变的情况下，再次渲染了。假设子组件如果非常庞大，渲染一次会消耗很多的性能，我们应该尽量减少这个组件的渲染，否则就容易产生性能问题。")])]),s._v(" "),t("p",[t("code",[s._v("React.memo")]),s._v(" 在给定相同 "),t("code",[s._v("props")]),s._v(" 的情况下渲染相同的结果，并且通过记忆组件渲染结果的方式来提高组件的性能表现。那么上面的例子就可以做如下修改：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('// 子组件\nimport React from "react";\n\nfunction Child(props) {\n  console.log(props.name)\n  return <p>{props.name}</p>\n}\n\nexport default React.memo(Child); // 用 React.memo()包裹\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br")])]),t("h3",{attrs:{id:"_2-2-usecallback-减少-render-的次数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-usecallback-减少-render-的次数"}},[s._v("#")]),s._v(" 2.2 useCallback （减少 render 的次数）")]),s._v(" "),t("p",[s._v("根据上面的例子，再改一下需求，父组件新增一个副标题和一个修改副标题的button，然后把修改标题的button放到子组件里。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('// 父组件\nimport React, { useState } from "react";\nimport ReactDOM from "react-dom";\nimport Child from "./child";\n\nfunction Father() {\n  const [title, setTitle] = useState("父组件的title");\n  const [subtitle, setSubtitle] = useState("父组件的副title");\n\n  const callback = () => {\n    setTitle("父组件的title改变了");\n  };\n  return (\n    <div className="Father">\n      <h1>{title}</h1>\n      <h2>{subtitle}</h2>\n      <button onClick={() => setSubtitle("父组件的副title改变了")}>修改父组件的副title</button>\n      <Child onClick={callback} name="父组件传递给子组件的值" />\n    </div>\n  );\n}\n\nconst rootElement = document.getElementById("root");\nReactDOM.render(<Father />, rootElement);\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br")])]),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('// 子组件\nimport React from "react";\n\nfunction Child(props) {\n  console.log(props.name);\n  return (\n    <div>\n      <button onClick={props.onClick}>修改父组件的title</button>\n      <h1>{props.name}</h1>\n    </div>\n  );\n}\n\nexport default React.memo(Child);\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br")])]),t("ul",[t("li",[s._v("首次渲染的效果如下：")])]),s._v(" "),t("p",[t("img",{attrs:{src:"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/24c21323c3e34ca6893e703a97a91746~tplv-k3u1fbpfcp-zoom-1.image",alt:""}})]),s._v(" "),t("ul",[t("li",[t("p",[s._v('并且在控制台会打印 "父组件传递给子组件的值"，说明 Child 组件渲染了。')])]),s._v(" "),t("li",[t("p",[s._v("接下来点击 修改父组件的副title 这个button，页面会变成：")])])]),s._v(" "),t("p",[t("img",{attrs:{src:"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/463f4b09a4ad457fab57e9bcf894656d~tplv-k3u1fbpfcp-zoom-1.image",alt:""}})]),s._v(" "),t("ul",[t("li",[s._v('可见 父组件的副title 已经改变了，而且控制台再次打印了 "父组件传递给子组件的值"。子组件在 props 没有改变的情况下，再次渲染了。但是子组件没有任何变化，那么这次子组件的重新渲染就是多余的，为什么又重新渲染了呢？')])]),s._v(" "),t("p",[t("strong",[s._v("一个组件重新渲染，一般有3种情况：")])]),s._v(" "),t("ol",[t("li",[s._v("组件自己的状态改变；")]),s._v(" "),t("li",[s._v("父组件重新渲染，导致子组件重新渲染，但是父组件的 "),t("code",[s._v("props")]),s._v(" 没有改变；")]),s._v(" "),t("li",[s._v("父组件重新渲染，导致子组件重新渲染，但是父组件传递的 "),t("code",[s._v("props")]),s._v(" 改变了；")])]),s._v(" "),t("blockquote",[t("p",[s._v("第一种果断排除，当点击修改副title的时候并没有去改变子组件的状态;")])]),s._v(" "),t("blockquote",[t("p",[s._v("第二种想一下也应该排除，父组件重新渲染了，父组件传递给子组件的 "),t("code",[s._v("props")]),s._v(" 没有改变，但是子组件重新渲染了，我们这个时候用 "),t("code",[s._v("React.memo")]),s._v(" 来解决了这个问题;")])]),s._v(" "),t("blockquote",[t("p",[s._v("那么应该是第三种情况了，当父组件重新渲染的时候，传递给子组件的 "),t("code",[s._v("props")]),s._v(" 发生了改变，传递给子组件的就两个属性，一个是 name，另一个是 onClick ，name 传递的是常量，没有变，变的就是 onClick 了，为什么传递给 onClick 的 callback 函数会发生改变呢？在文章的开头就已经说过了，在函数式组件里每次重新渲染，函数组件都会重头开始重新执行，那么这两次创建的 callback 函数肯定发生了改变，所以导致了子组件重新渲染。")])]),s._v(" "),t("p",[t("code",[s._v("useCallback")]),s._v(" 在函数没有改变的时候，重新渲染的时候保持两个函数的引用一致，那么上面的例子就可以做如下修改：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('// 父组件\nimport React, { useState, useCallback } from "react";\nimport ReactDOM from "react-dom";\nimport Child from "./child";\n\nfunction Father() {\n  const [title, setTitle] = useState("父组件的title");\n  const [subtitle, setSubtitle] = useState("父组件的副title");\n\n  const callback = () => {\n    setTitle("父组件的title改变了");\n  };\n  \n  // 通过 useCallback 进行记忆 callback，并将记忆的 callback 传递给子组件\n  const _callback = useCallback(callback, []);\n  \n  return (\n    <div className="Father">\n      <h1>{title}</h1>\n      <h2>{subtitle}</h2>\n      <button onClick={() => setSubtitle("父组件的副title改变了")}>修改父组件的副title</button>\n      <Child onClick={_callback} name="父组件传递给子组件的值" />\n    </div>\n  );\n}\n\nconst rootElement = document.getElementById("root");\nReactDOM.render(<Father />, rootElement);\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br")])]),t("h3",{attrs:{id:"_2-3-usememo-减少计算的量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-usememo-减少计算的量"}},[s._v("#")]),s._v(" 2.3 useMemo （减少计算的量）")]),s._v(" "),t("p",[t("code",[s._v("useMemo")]),s._v(" 主要是用来缓存计算量比较大的函数结果，可以避免不必要的重复计算，和 "),t("code",[s._v("Vue")]),s._v(" 里面的 "),t("code",[s._v("computed")]),s._v(" 有异曲同工的作用，可以减少计算的量。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('import React, { useState } from "react";\nfunction App() {\n  const [num, setNum] = useState(0);\n\n  // 一个非常耗时的一个计算函数\n  // result 最后返回的值是 49995000\n  function resultFn() {\n    let result = 0;\n    \n    for (let i = 0; i < 10000; i++) {\n      result += i;\n    }\n    \n    console.log(result) // 49995000\n    return result;\n  }\n\n  const resultNum = resultFn();\n\n  return (\n    <div className="App">\n      <h1>count：{num}</h1>\n      <button onClick={() => setNum(num + resultNum)}>+1</button>\n    </div>\n  );\n}\n\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br")])]),t("p",[s._v("如果我们把 "),t("code",[s._v("i")]),s._v(" 变成10000000，每次点击 +1 按钮的时候，都会重新渲染且得到的结果都是一样的，这样会对性能造成一些影响，我们可以做如下修改：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('import React, { useState, useMemo } from "react";\nfunction App() {\n  const [num, setNum] = useState(0);\n\n  // 一个非常耗时的一个计算函数\n  // result 最后返回的值是 49995000\n  function resultFn() {\n    let result = 0;\n    \n    for (let i = 0; i < 10000; i++) {\n      result += i;\n    }\n    \n    console.log(result) // 49995000\n    return result;\n  }\n\n  const resultNum = useMemo(resultFn, []); //这使用了 useMemo\n\n  return (\n    <div className="App">\n      <h1>count：{num}</h1>\n      <button onClick={() => setNum(num + resultNum)}>+1</button>\n    </div>\n  );\n}\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br")])]),t("p",[s._v("需要注意两点：")]),s._v(" "),t("blockquote",[t("p",[s._v("一、如果没有提供依赖项数组，useMemo 在每次渲染时都会计算新的值；")])]),s._v(" "),t("blockquote",[t("p",[s._v("二、如果计算量很小的计算函数，可以选择不使用 useMemo，避免使用不当造成其他问题；")])]),s._v(" "),t("p",[t("a",{attrs:{href:"www.chengxiaohui.cn"}},[s._v("更多技术分享请关注我的个人博客 www.chengxiaohui.cn。欢迎骚扰━("),t("em",[s._v("｀∀´")]),s._v(")ノ亻!")])])])}),[],!1,null,null,null);n.default=a.exports}}]);